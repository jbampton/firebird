/*
 *  The contents of this file are subject to the Initial
 *  Developer's Public License Version 1.0 (the "License");
 *  you may not use this file except in compliance with the
 *  License. You may obtain a copy of the License at
 *  http://www.ibphoenix.com/main.nfs?a=ibphoenix&page=ibp_idpl.
 *
 *  Software distributed under the License is distributed AS IS,
 *  WITHOUT WARRANTY OF ANY KIND, either express or implied.
 *  See the License for the specific language governing rights
 *  and limitations under the License.
 *
 *  The Original Code was created by Adriano dos Santos Fernandes
 *  for the Firebird Open Source RDBMS project.
 *
 *  Copyright (c) 2009 Adriano dos Santos Fernandes <adrianosf@uol.com.br>
 *  and all contributors signed below.
 *
 *  All Rights Reserved.
 *  Contributor(s): ______________________________________.
 */

#include "firebird.h"
#include "../dsql/PackageNodes.h"
#include "../jrd/dyn.h"
#include "../jrd/intl.h"
#include "../jrd/jrd.h"
#include "../jrd/tra.h"
#include "../jrd/dfw_proto.h"
#include "../jrd/dyn_ut_proto.h"
#include "../jrd/exe_proto.h"
#include "../jrd/met_proto.h"
#include "../jrd/vio_proto.h"
#include "../dsql/make_proto.h"
#include "../dsql/pass1_proto.h"
#include "../common/StatusArg.h"
#include "../common/classes/TriState.h"
#include "../jrd/Attachment.h"
#include "../jrd/scl_proto.h"


using namespace Firebird;

namespace Jrd {

using namespace Firebird;

DATABASE DB = STATIC "ODS.RDB";


//----------------------


namespace
{
	// Return function and procedure names (in the user charset) and optionally its details for a
	// given package.
	void collectPackagedItems(thread_db* tdbb, jrd_tra* transaction, const QualifiedName& packageName,
		SortedObjectsArray<Signature>& functions,
		SortedObjectsArray<Signature>& procedures, bool details)
	{
		AutoCacheRequest requestHandle(tdbb, drq_l_pkg_funcs, DYN_REQUESTS);
		AutoCacheRequest requestHandle2(tdbb, drq_l_pkg_func_args, DYN_REQUESTS);

		FOR (REQUEST_HANDLE requestHandle TRANSACTION_HANDLE transaction)
			FUN IN RDB$FUNCTIONS
			WITH FUN.RDB$SCHEMA_NAME EQ packageName.schema.c_str() AND
				 FUN.RDB$PACKAGE_NAME EQ packageName.object.c_str()
		{
			Signature function(FUN.RDB$FUNCTION_NAME);
			function.defined = !FUN.RDB$FUNCTION_BLR.NULL || !FUN.RDB$ENTRYPOINT.NULL;

			if (!FUN.RDB$DETERMINISTIC_FLAG.NULL && FUN.RDB$DETERMINISTIC_FLAG != 0)
				function.flags |= Signature::FLAG_DETERMINISTIC;

			if (details)
			{
				FOR (REQUEST_HANDLE requestHandle2 TRANSACTION_HANDLE transaction)
					ARG IN RDB$FUNCTION_ARGUMENTS CROSS
					FLD IN RDB$FIELDS
					WITH ARG.RDB$SCHEMA_NAME EQ FUN.RDB$SCHEMA_NAME AND
						 ARG.RDB$PACKAGE_NAME EQ FUN.RDB$PACKAGE_NAME AND
						 ARG.RDB$FUNCTION_NAME EQ FUN.RDB$FUNCTION_NAME AND
						 FLD.RDB$SCHEMA_NAME EQUIV ARG.RDB$FIELD_SOURCE_SCHEMA_NAME AND
						 FLD.RDB$FIELD_NAME EQ ARG.RDB$FIELD_SOURCE
				{
					SignatureParameter parameter(*getDefaultMemoryPool());

					parameter.number = ARG.RDB$ARGUMENT_POSITION;
					parameter.name = ARG.RDB$ARGUMENT_NAME;
					parameter.fieldSource = QualifiedName(ARG.RDB$FIELD_SOURCE, ARG.RDB$FIELD_SOURCE_SCHEMA_NAME);
					parameter.mechanism = ARG.RDB$ARGUMENT_MECHANISM;

					if (!ARG.RDB$FIELD_NAME.NULL)
						parameter.fieldName = QualifiedName(ARG.RDB$FIELD_NAME);
					if (!ARG.RDB$RELATION_NAME.NULL)
						parameter.relationName = QualifiedName(ARG.RDB$RELATION_NAME, ARG.RDB$RELATION_SCHEMA_NAME);
					if (!ARG.RDB$COLLATION_ID.NULL)
						parameter.collationId = ARG.RDB$COLLATION_ID;
					if (!ARG.RDB$NULL_FLAG.NULL)
						parameter.nullFlag = ARG.RDB$NULL_FLAG;

					if (!FLD.RDB$FIELD_LENGTH.NULL)
						parameter.fieldLength = FLD.RDB$FIELD_LENGTH;
					if (!FLD.RDB$FIELD_SCALE.NULL)
						parameter.fieldScale = FLD.RDB$FIELD_SCALE;
					if (!FLD.RDB$FIELD_TYPE.NULL)
						parameter.fieldType = FLD.RDB$FIELD_TYPE;
					if (!FLD.RDB$FIELD_SUB_TYPE.NULL)
						parameter.fieldSubType = FLD.RDB$FIELD_SUB_TYPE;
					if (!FLD.RDB$SEGMENT_LENGTH.NULL)
						parameter.fieldSegmentLength = FLD.RDB$SEGMENT_LENGTH;
					if (!FLD.RDB$NULL_FLAG.NULL)
						parameter.fieldNullFlag = FLD.RDB$NULL_FLAG;
					if (!FLD.RDB$CHARACTER_LENGTH.NULL)
						parameter.fieldCharLength = FLD.RDB$CHARACTER_LENGTH;
					if (!FLD.RDB$COLLATION_ID.NULL)
						parameter.fieldCollationId = FLD.RDB$COLLATION_ID;
					if (!FLD.RDB$CHARACTER_SET_ID.NULL)
						parameter.fieldCharSetId = FLD.RDB$CHARACTER_SET_ID;
					if (!FLD.RDB$FIELD_PRECISION.NULL)
						parameter.fieldPrecision = FLD.RDB$FIELD_PRECISION;

					function.parameters.add(parameter);
				}
				END_FOR
			}

			functions.add(function);
		}
		END_FOR

		requestHandle.reset(tdbb, drq_l_pkg_procs, DYN_REQUESTS);
		requestHandle2.reset(tdbb, drq_l_pkg_proc_args, DYN_REQUESTS);

		FOR (REQUEST_HANDLE requestHandle TRANSACTION_HANDLE transaction)
			PRC IN RDB$PROCEDURES
			WITH PRC.RDB$SCHEMA_NAME EQ packageName.schema.c_str() AND
				 PRC.RDB$PACKAGE_NAME EQ packageName.object.c_str()
		{
			Signature procedure(PRC.RDB$PROCEDURE_NAME);
			procedure.defined = !PRC.RDB$PROCEDURE_BLR.NULL || !PRC.RDB$ENTRYPOINT.NULL;

			if (details)
			{
				FOR (REQUEST_HANDLE requestHandle2 TRANSACTION_HANDLE transaction)
					PRM IN RDB$PROCEDURE_PARAMETERS CROSS
					FLD IN RDB$FIELDS
					WITH PRM.RDB$SCHEMA_NAME EQ PRC.RDB$SCHEMA_NAME AND
						 PRM.RDB$PACKAGE_NAME EQ PRC.RDB$PACKAGE_NAME AND
						 PRM.RDB$PROCEDURE_NAME EQ PRC.RDB$PROCEDURE_NAME AND
						 FLD.RDB$SCHEMA_NAME EQUIV PRM.RDB$FIELD_SOURCE_SCHEMA_NAME AND
						 FLD.RDB$FIELD_NAME EQ PRM.RDB$FIELD_SOURCE
				{
					SignatureParameter parameter(*getDefaultMemoryPool());
					parameter.type = PRM.RDB$PARAMETER_TYPE;
					parameter.number = PRM.RDB$PARAMETER_NUMBER;
					parameter.name = PRM.RDB$PARAMETER_NAME;
					parameter.fieldSource = QualifiedName(PRM.RDB$FIELD_SOURCE, PRM.RDB$FIELD_SOURCE_SCHEMA_NAME);
					parameter.mechanism = PRM.RDB$PARAMETER_MECHANISM;

					if (!PRM.RDB$FIELD_NAME.NULL)
						parameter.fieldName = QualifiedName(PRM.RDB$FIELD_NAME);
					if (!PRM.RDB$RELATION_NAME.NULL)
						parameter.relationName = QualifiedName(PRM.RDB$RELATION_NAME, PRM.RDB$RELATION_SCHEMA_NAME);
					if (!PRM.RDB$COLLATION_ID.NULL)
						parameter.collationId = PRM.RDB$COLLATION_ID;
					if (!PRM.RDB$NULL_FLAG.NULL)
						parameter.nullFlag = PRM.RDB$NULL_FLAG;

					if (!FLD.RDB$FIELD_LENGTH.NULL)
						parameter.fieldLength = FLD.RDB$FIELD_LENGTH;
					if (!FLD.RDB$FIELD_SCALE.NULL)
						parameter.fieldScale = FLD.RDB$FIELD_SCALE;
					if (!FLD.RDB$FIELD_TYPE.NULL)
						parameter.fieldType = FLD.RDB$FIELD_TYPE;
					if (!FLD.RDB$FIELD_SUB_TYPE.NULL)
						parameter.fieldSubType = FLD.RDB$FIELD_SUB_TYPE;
					if (!FLD.RDB$SEGMENT_LENGTH.NULL)
						parameter.fieldSegmentLength = FLD.RDB$SEGMENT_LENGTH;
					if (!FLD.RDB$NULL_FLAG.NULL)
						parameter.fieldNullFlag = FLD.RDB$NULL_FLAG;
					if (!FLD.RDB$CHARACTER_LENGTH.NULL)
						parameter.fieldCharLength = FLD.RDB$CHARACTER_LENGTH;
					if (!FLD.RDB$COLLATION_ID.NULL)
						parameter.fieldCollationId = FLD.RDB$COLLATION_ID;
					if (!FLD.RDB$CHARACTER_SET_ID.NULL)
						parameter.fieldCharSetId = FLD.RDB$CHARACTER_SET_ID;
					if (!FLD.RDB$FIELD_PRECISION.NULL)
						parameter.fieldPrecision = FLD.RDB$FIELD_PRECISION;

					procedure.parameters.add(parameter);
				}
				END_FOR
			}

			procedures.add(procedure);
		}
		END_FOR
	}
}	// namespace


//----------------------


string CreateAlterPackageNode::internalPrint(NodePrinter& printer) const
{
	DdlNode::internalPrint(printer);

	NODE_PRINT(printer, name);
	NODE_PRINT(printer, create);
	NODE_PRINT(printer, alter);
	NODE_PRINT(printer, source);
	//// FIXME-PRINT: NODE_PRINT(printer, items);
	NODE_PRINT(printer, functionNames);
	NODE_PRINT(printer, procedureNames);

	return "CreateAlterPackageNode";
}


DdlNode* CreateAlterPackageNode::dsqlPass(DsqlCompilerScratch* dsqlScratch)
{
	if (create)
		dsqlScratch->qualifyNewName(name);
	else
		dsqlScratch->qualifyExistingName(name, obj_package_header);

	protectSystemSchema(name.schema, obj_package_header);
	dsqlScratch->ddlSchema = name.schema;

	if (alter && !items)
		return DdlNode::dsqlPass(dsqlScratch);

	MemoryPool& pool = dsqlScratch->getPool();

	source.ltrim("\n\r\t ");

	// items
	for (unsigned i = 0; i < items->getCount(); ++i)
	{
		DdlNode* ddlNode;

		switch ((*items)[i].type)
		{
			case CreateAlterPackageNode::Item::FUNCTION:
			{
				CreateAlterFunctionNode* const fun = (*items)[i].function;
				ddlNode = fun;

				if (functionNames.exist(fun->name.object))
				{
					status_exception::raise(
						Arg::Gds(isc_no_meta_update) <<
						Arg::Gds(isc_dyn_duplicate_package_item) <<
							Arg::Str("FUNCTION") << fun->name.object);
				}

				functionNames.add(fun->name.object);

				fun->alter = true;
				fun->name.schema = name.schema;
				fun->name.package = name.object;
				break;
			}

			case CreateAlterPackageNode::Item::PROCEDURE:
			{
				CreateAlterProcedureNode* const proc = (*items)[i].procedure;
				ddlNode = proc;

				if (procedureNames.exist(proc->name.object))
				{
					status_exception::raise(
						Arg::Gds(isc_no_meta_update) <<
						Arg::Gds(isc_dyn_duplicate_package_item) <<
							Arg::Str("PROCEDURE") << proc->name.object);
				}

				procedureNames.add(proc->name.object);

				proc->alter = true;
				proc->name.schema = name.schema;
				proc->name.package = name.object;
				break;
			}

			default:
				fb_assert(false);
		}

		auto itemStatement = FB_NEW_POOL(pool) DsqlDdlStatement(pool, dsqlScratch->getAttachment(), ddlNode);

		auto itemScratch = (*items)[i].dsqlScratch =
			FB_NEW_POOL(pool) DsqlCompilerScratch(pool, dsqlScratch->getAttachment(),
				dsqlScratch->getTransaction(), itemStatement);

		itemScratch->ddlSchema = name.schema;
		itemScratch->clientDialect = dsqlScratch->clientDialect;
		itemScratch->flags |= DsqlCompilerScratch::FLAG_DDL;
		itemScratch->package = name;

		if (itemScratch->clientDialect > SQL_DIALECT_V5)
			itemStatement->setBlrVersion(5);
		else
			itemStatement->setBlrVersion(4);

		ddlNode->dsqlPass(itemScratch);
	}

	return DdlNode::dsqlPass(dsqlScratch);
}


void CreateAlterPackageNode::checkPermission(thread_db* tdbb, jrd_tra* transaction)
{
	if (alter)
	{
		if (SCL_check_package(tdbb, name, SCL_alter) || !create)
			return;
	}

	SCL_check_create_access(tdbb, obj_packages, name.schema);
}


void CreateAlterPackageNode::execute(thread_db* tdbb, DsqlCompilerScratch* dsqlScratch,
	jrd_tra* transaction)
{
	fb_assert(create || alter);

	//Database* dbb = tdbb->getDatabase();

	//dbb->checkOdsForDsql(ODS_12_0);

	// run all statements under savepoint control
	AutoSavePoint savePoint(tdbb, transaction);

	const bool alterIndividualParameters = (!create && alter && !items);

	if (alter)
	{
		if (alterIndividualParameters)
		{
			if (!executeAlterIndividualParameters(tdbb, dsqlScratch, transaction))
				status_exception::raise(
					Arg::Gds(isc_no_meta_update) <<
					Arg::Gds(isc_dyn_package_not_found) << name.toQuotedString());
		}
		else if (!executeAlter(tdbb, dsqlScratch, transaction))
		{
			if (create)	// create or alter
				executeCreate(tdbb, dsqlScratch, transaction);
			else
			{
				status_exception::raise(
					Arg::Gds(isc_no_meta_update) <<
					Arg::Gds(isc_dyn_package_not_found) << name.toQuotedString());
			}
		}

		dsc schemaDesc, nameDesc;
		schemaDesc.makeText(name.schema.length(), ttype_metadata, (UCHAR*) const_cast<char*>(name.schema.c_str()));
		nameDesc.makeText(name.object.length(), ttype_metadata, (UCHAR*) const_cast<char*>(name.object.c_str()));
		DFW_post_work(transaction, dfw_modify_package_header, &nameDesc, &schemaDesc, 0);
	}
	else
		executeCreate(tdbb, dsqlScratch, transaction);

	savePoint.release();	// everything is ok
}


void CreateAlterPackageNode::executeCreate(thread_db* tdbb, DsqlCompilerScratch* dsqlScratch,
	jrd_tra* transaction)
{
	Attachment* const attachment = transaction->getAttachment();
	const MetaString& ownerName = attachment->getEffectiveUserName();

	if (createIfNotExistsOnly && !DYN_UTIL_check_unique_name_nothrow(tdbb, transaction, name, obj_package_header))
		return;

	executeDdlTrigger(tdbb, dsqlScratch, transaction, DTW_BEFORE, DDL_TRIGGER_CREATE_PACKAGE, name, {});

	DYN_UTIL_check_unique_name(tdbb, transaction, name, obj_package_header);

	AutoCacheRequest requestHandle(tdbb, drq_s_pkg, DYN_REQUESTS);

	STORE (REQUEST_HANDLE requestHandle TRANSACTION_HANDLE transaction)
		PKG IN RDB$PACKAGES USING
	{
		PKG.RDB$SCHEMA_NAME.NULL = FALSE;
		strcpy(PKG.RDB$SCHEMA_NAME, name.schema.c_str());

		PKG.RDB$PACKAGE_NAME.NULL = FALSE;
		strcpy(PKG.RDB$PACKAGE_NAME, name.object.c_str());

		PKG.RDB$SYSTEM_FLAG.NULL = FALSE;
		PKG.RDB$SYSTEM_FLAG = 0;

		PKG.RDB$OWNER_NAME.NULL = FALSE;
		strcpy(PKG.RDB$OWNER_NAME, ownerName.c_str());

		PKG.RDB$PACKAGE_HEADER_SOURCE.NULL = FALSE;
		attachment->storeMetaDataBlob(tdbb, transaction, &PKG.RDB$PACKAGE_HEADER_SOURCE, source);

		if (ssDefiner.has_value())
		{
			PKG.RDB$SQL_SECURITY.NULL = FALSE;
			PKG.RDB$SQL_SECURITY = ssDefiner.value() == SqlSecurity::SS_DEFINER ? FB_TRUE : FB_FALSE;
		}
		else
			PKG.RDB$SQL_SECURITY.NULL = TRUE;
	}
	END_STORE

	storePrivileges(tdbb, transaction, name, obj_package_header, EXEC_PRIVILEGES);

	owner = ownerName;

	executeItems(tdbb, dsqlScratch, transaction);

	executeDdlTrigger(tdbb, dsqlScratch, transaction, DTW_AFTER, DDL_TRIGGER_CREATE_PACKAGE, name, {});
}


bool CreateAlterPackageNode::executeAlter(thread_db* tdbb, DsqlCompilerScratch* dsqlScratch,
	jrd_tra* transaction)
{
	MemoryPool& pool = dsqlScratch->getPool();
	Attachment* attachment = transaction->getAttachment();
	AutoCacheRequest requestHandle(tdbb, drq_m_pkg, DYN_REQUESTS);
	bool modified = false;

	FOR (REQUEST_HANDLE requestHandle TRANSACTION_HANDLE transaction)
		PKG IN RDB$PACKAGES
		WITH PKG.RDB$SCHEMA_NAME EQ name.schema.c_str() AND
			 PKG.RDB$PACKAGE_NAME EQ name.object.c_str()
	{
		modified = true;

		executeDdlTrigger(tdbb, dsqlScratch, transaction, DTW_BEFORE, DDL_TRIGGER_ALTER_PACKAGE, name, {});

		SortedObjectsArray<Signature> existingFuncs(pool);
		SortedObjectsArray<Signature> existingProcs(pool);
		collectPackagedItems(tdbb, transaction, name, existingFuncs, existingProcs, false);

		for (SortedObjectsArray<Signature>::iterator i = existingFuncs.begin();
			 i != existingFuncs.end(); ++i)
		{
			if (!functionNames.exist(i->name))
			{
				DropFunctionNode dropNode(pool, QualifiedName(i->name, name.schema, name.object));
				dropNode.dsqlPass(dsqlScratch);
				dropNode.executeDdl(tdbb, dsqlScratch, transaction, true);
			}
		}

		for (SortedObjectsArray<Signature>::iterator i = existingProcs.begin();
			 i != existingProcs.end(); ++i)
		{
			if (!procedureNames.exist(i->name))
			{
				DropProcedureNode dropNode(pool, QualifiedName(i->name, name.schema, name.object));
				dropNode.dsqlPass(dsqlScratch);
				dropNode.executeDdl(tdbb, dsqlScratch, transaction, true);
			}
		}

		MODIFY PKG
			PKG.RDB$PACKAGE_HEADER_SOURCE.NULL = FALSE;
			attachment->storeMetaDataBlob(tdbb, transaction, &PKG.RDB$PACKAGE_HEADER_SOURCE,
				source);

			if (!PKG.RDB$VALID_BODY_FLAG.NULL)
				PKG.RDB$VALID_BODY_FLAG = FALSE;

			if (ssDefiner.has_value())
			{
				PKG.RDB$SQL_SECURITY.NULL = FALSE;
				PKG.RDB$SQL_SECURITY = ssDefiner.value() == SqlSecurity::SS_DEFINER ? FB_TRUE : FB_FALSE;
			}
			else
				PKG.RDB$SQL_SECURITY.NULL = TRUE;
		END_MODIFY

		owner = PKG.RDB$OWNER_NAME;

		dsc schemaDesc, nameDesc;
		schemaDesc.makeText(name.schema.length(), ttype_metadata, (UCHAR*) const_cast<char*>(name.schema.c_str()));
		nameDesc.makeText(name.object.length(), ttype_metadata, (UCHAR*) const_cast<char*>(name.object.c_str()));
		DFW_post_work(transaction, dfw_drop_package_body, &nameDesc, &schemaDesc, 0);
	}
	END_FOR

	if (modified)
	{
		executeItems(tdbb, dsqlScratch, transaction);

		executeDdlTrigger(tdbb, dsqlScratch, transaction, DTW_AFTER, DDL_TRIGGER_ALTER_PACKAGE, name, {});
	}

	return modified;
}


bool CreateAlterPackageNode::executeAlterIndividualParameters(thread_db* tdbb, DsqlCompilerScratch* dsqlScratch, jrd_tra* transaction)
{
	AutoCacheRequest requestHandle(tdbb, drq_m_prm_pkg, DYN_REQUESTS);
	bool modified = false;

	FOR (REQUEST_HANDLE requestHandle TRANSACTION_HANDLE transaction)
		PKG IN RDB$PACKAGES
		WITH PKG.RDB$SCHEMA_NAME EQ name.schema.c_str() AND
			 PKG.RDB$PACKAGE_NAME EQ name.object.c_str()
	{
		modified = true;

		executeDdlTrigger(tdbb, dsqlScratch, transaction, DTW_BEFORE, DDL_TRIGGER_ALTER_PACKAGE, name, {});

		MODIFY PKG
			if (ssDefiner.has_value())
			{
				if (ssDefiner.value() != SqlSecurity::SS_DROP)
				{
					PKG.RDB$SQL_SECURITY.NULL = FALSE;
					PKG.RDB$SQL_SECURITY = ssDefiner.value() == SqlSecurity::SS_DEFINER ? FB_TRUE : FB_FALSE;
				}
				else
					PKG.RDB$SQL_SECURITY.NULL = TRUE;
			}
		END_MODIFY
	}
	END_FOR

	if (modified)
		executeDdlTrigger(tdbb, dsqlScratch, transaction, DTW_AFTER, DDL_TRIGGER_ALTER_PACKAGE, name, {});

	return modified;
}

void CreateAlterPackageNode::executeItems(thread_db* tdbb, DsqlCompilerScratch* dsqlScratch,
	jrd_tra* transaction)
{
	for (unsigned i = 0; i < items->getCount(); ++i)
	{
		switch ((*items)[i].type)
		{
			case Item::FUNCTION:
				(*items)[i].function->packageOwner = owner;
				(*items)[i].function->executeDdl(tdbb, (*items)[i].dsqlScratch, transaction, true);
				break;

			case Item::PROCEDURE:
				(*items)[i].procedure->packageOwner = owner;
				(*items)[i].procedure->executeDdl(tdbb, (*items)[i].dsqlScratch, transaction, true);
				break;
		}
	}
}


//----------------------


string DropPackageNode::internalPrint(NodePrinter& printer) const
{
	DdlNode::internalPrint(printer);

	NODE_PRINT(printer, name);
	NODE_PRINT(printer, silent);

	return "DropPackageNode";
}


void DropPackageNode::checkPermission(thread_db* tdbb, jrd_tra* transaction)
{
	SCL_check_package(tdbb, name, SCL_drop);
}


void DropPackageNode::execute(thread_db* tdbb, DsqlCompilerScratch* dsqlScratch, jrd_tra* transaction)
{
	MemoryPool& pool = dsqlScratch->getPool();

	// run all statements under savepoint control
	AutoSavePoint savePoint(tdbb, transaction);

	bool found = false;
	AutoCacheRequest requestHandle(tdbb, drq_e_pkg, DYN_REQUESTS);

	FOR (REQUEST_HANDLE requestHandle TRANSACTION_HANDLE transaction)
		PKG IN RDB$PACKAGES
		WITH PKG.RDB$SCHEMA_NAME EQ name.schema.c_str() AND
			 PKG.RDB$PACKAGE_NAME EQ name.object.c_str()
	{
		found = true;

		executeDdlTrigger(tdbb, dsqlScratch, transaction, DTW_BEFORE, DDL_TRIGGER_DROP_PACKAGE, name, {});

		ERASE PKG;

		if (!PKG.RDB$SECURITY_CLASS.NULL)
			deleteSecurityClass(tdbb, transaction, PKG.RDB$SECURITY_CLASS);

		dsc schemaDesc, nameDesc;
		schemaDesc.makeText(name.schema.length(), ttype_metadata, (UCHAR*) const_cast<char*>(name.schema.c_str()));
		nameDesc.makeText(name.object.length(), ttype_metadata, (UCHAR*) const_cast<char*>(name.object.c_str()));
		DFW_post_work(transaction, dfw_drop_package_header, &nameDesc, &schemaDesc, 0);
	}
	END_FOR

	if (!found && !silent)
	{
		status_exception::raise(
			Arg::Gds(isc_no_meta_update) <<
			Arg::Gds(isc_dyn_package_not_found) << name.toQuotedString());
	}

	SortedObjectsArray<Signature> existingFuncs(pool);
	SortedObjectsArray<Signature> existingProcs(pool);
	collectPackagedItems(tdbb, transaction, name, existingFuncs, existingProcs, false);

	for (SortedObjectsArray<Signature>::iterator i = existingFuncs.begin();
		 i != existingFuncs.end(); ++i)
	{
		DropFunctionNode dropNode(pool, QualifiedName(i->name, name.schema, name.object));
		dropNode.dsqlPass(dsqlScratch);
		dropNode.executeDdl(tdbb, dsqlScratch, transaction, true);
	}

	for (SortedObjectsArray<Signature>::iterator i = existingProcs.begin();
		 i != existingProcs.end(); ++i)
	{
		DropProcedureNode dropNode(pool, QualifiedName(i->name, name.schema, name.object));
		dropNode.dsqlPass(dsqlScratch);
		dropNode.executeDdl(tdbb, dsqlScratch, transaction, true);
	}

	requestHandle.reset(tdbb, drq_e_pkg_prv, DYN_REQUESTS);

	FOR (REQUEST_HANDLE requestHandle TRANSACTION_HANDLE transaction)
		PRIV IN RDB$USER_PRIVILEGES
		WITH ((PRIV.RDB$RELATION_SCHEMA_NAME EQ name.schema.c_str() AND
			   PRIV.RDB$RELATION_NAME EQ name.object.c_str() AND
			   PRIV.RDB$OBJECT_TYPE = obj_package_header) OR
			 (PRIV.RDB$USER_SCHEMA_NAME EQ name.schema.c_str() AND
			  PRIV.RDB$USER EQ name.object.c_str() AND
			  PRIV.RDB$USER_TYPE = obj_package_header)) AND
			 PRIV.RDB$GRANTOR NOT MISSING
	{
		ERASE PRIV;
	}
	END_FOR

	if (found)
		executeDdlTrigger(tdbb, dsqlScratch, transaction, DTW_AFTER, DDL_TRIGGER_DROP_PACKAGE, name, {});

	savePoint.release();	// everything is ok
}


//----------------------


string CreatePackageBodyNode::internalPrint(NodePrinter& printer) const
{
	DdlNode::internalPrint(printer);

	NODE_PRINT(printer, name);
	NODE_PRINT(printer, source);
	//// FIXME-PRINT: NODE_PRINT(printer, declaredItems);
	//// FIXME-PRINT: NODE_PRINT(printer, items);

	return "CreatePackageBodyNode";
}


DdlNode* CreatePackageBodyNode::dsqlPass(DsqlCompilerScratch* dsqlScratch)
{
	dsqlScratch->qualifyExistingName(name, obj_package_header);
	protectSystemSchema(name.schema, obj_package_header);
	dsqlScratch->ddlSchema = name.schema;

	MemoryPool& pool = dsqlScratch->getPool();

	source.ltrim("\n\r\t ");

	// process declaredItems and items
	Array<CreateAlterPackageNode::Item>* arrays[] = {declaredItems, items};
	SortedArray<MetaName> functionNames[FB_NELEM(arrays)];
	SortedArray<MetaName> procedureNames[FB_NELEM(arrays)];

	for (unsigned i = 0; i < FB_NELEM(arrays); ++i)
	{
		if (!arrays[i])
			continue;

		for (unsigned j = 0; j < arrays[i]->getCount(); ++j)
		{
			DdlNode* ddlNode;

			switch ((*arrays[i])[j].type)
			{
				case CreateAlterPackageNode::Item::FUNCTION:
				{
					CreateAlterFunctionNode* const fun = (*arrays[i])[j].function;
					ddlNode = fun;

					if (functionNames[i].exist(fun->name.object))
					{
						status_exception::raise(
							Arg::Gds(isc_no_meta_update) <<
							Arg::Gds(isc_dyn_duplicate_package_item) <<
								Arg::Str("FUNCTION") << fun->name.object);
					}

					functionNames[i].add(fun->name.object);

					fun->name.schema = name.schema;
					fun->name.package = name.object;
					fun->create = true;

					if (arrays[i] == items)
						fun->alter = true;

					break;
				}

				case CreateAlterPackageNode::Item::PROCEDURE:
				{
					CreateAlterProcedureNode* const proc = (*arrays[i])[j].procedure;
					ddlNode = proc;

					if (procedureNames[i].exist(proc->name.object))
					{
						status_exception::raise(
							Arg::Gds(isc_no_meta_update) <<
							Arg::Gds(isc_dyn_duplicate_package_item) <<
								Arg::Str("PROCEDURE") << proc->name.object);
					}

					procedureNames[i].add(proc->name.object);

					proc->name.schema = name.schema;
					proc->name.package = name.object;
					proc->create = true;

					if (arrays[i] == items)
						proc->alter = true;

					break;
				}

				default:
					fb_assert(false);
			}

			auto itemStatement = FB_NEW_POOL(pool) DsqlDdlStatement(pool, dsqlScratch->getAttachment(), ddlNode);

			auto itemScratch = (*arrays[i])[j].dsqlScratch =
				FB_NEW_POOL(pool) DsqlCompilerScratch(pool, dsqlScratch->getAttachment(),
					dsqlScratch->getTransaction(), itemStatement);

			itemScratch->ddlSchema = name.schema;
			itemScratch->clientDialect = dsqlScratch->clientDialect;
			itemScratch->flags |= DsqlCompilerScratch::FLAG_DDL;
			itemScratch->package = name;

			if (itemScratch->clientDialect > SQL_DIALECT_V5)
				itemStatement->setBlrVersion(5);
			else
				itemStatement->setBlrVersion(4);

			ddlNode->dsqlPass(itemScratch);
		}
	}

	return DdlNode::dsqlPass(dsqlScratch);
}


void CreatePackageBodyNode::checkPermission(thread_db* tdbb, jrd_tra* transaction)
{
	SCL_check_create_access(tdbb, obj_packages, name.schema);
}


void CreatePackageBodyNode::execute(thread_db* tdbb, DsqlCompilerScratch* dsqlScratch, jrd_tra* transaction)
{
	MemoryPool& pool = dsqlScratch->getPool();
	Attachment* attachment = transaction->getAttachment();

	// run all statements under savepoint control
	AutoSavePoint savePoint(tdbb, transaction);

	AutoCacheRequest requestHandle(tdbb, drq_m_pkg_body, DYN_REQUESTS);
	bool modified = false;

	FOR (REQUEST_HANDLE requestHandle TRANSACTION_HANDLE transaction)
		PKG IN RDB$PACKAGES
		WITH PKG.RDB$SCHEMA_NAME EQ name.schema.c_str() AND
			 PKG.RDB$PACKAGE_NAME EQ name.object.c_str()
	{
		if (!PKG.RDB$VALID_BODY_FLAG.NULL && PKG.RDB$VALID_BODY_FLAG != 0)
		{
			if (createIfNotExistsOnly)
				return;

			status_exception::raise(
				Arg::Gds(isc_no_meta_update) <<
				Arg::Gds(isc_dyn_package_body_exists) << name.toQuotedString());
		}

		executeDdlTrigger(tdbb, dsqlScratch, transaction, DTW_BEFORE, DDL_TRIGGER_CREATE_PACKAGE_BODY, name, {});

		MODIFY PKG
			PKG.RDB$VALID_BODY_FLAG.NULL = FALSE;
			PKG.RDB$VALID_BODY_FLAG = TRUE;

			PKG.RDB$PACKAGE_BODY_SOURCE.NULL = FALSE;
			attachment->storeMetaDataBlob(tdbb, transaction, &PKG.RDB$PACKAGE_BODY_SOURCE, source);
		END_MODIFY

		modified = true;

		owner = PKG.RDB$OWNER_NAME;
	}
	END_FOR

	if (!modified)
	{
		status_exception::raise(
			Arg::Gds(isc_no_meta_update) <<
			Arg::Gds(isc_dyn_package_not_found) << name.toQuotedString());
	}

	SortedObjectsArray<Signature> headerFuncs(pool);
	SortedObjectsArray<Signature> headerProcs(pool);
	collectPackagedItems(tdbb, transaction, name, headerFuncs, headerProcs, false);

	SortedObjectsArray<Signature> existingFuncs(pool);
	SortedObjectsArray<Signature> existingProcs(pool);

	// process declaredItems and items
	Array<CreateAlterPackageNode::Item>* arrays[] = {declaredItems, items};

	for (unsigned i = 0; i < FB_NELEM(arrays); ++i)
	{
		if (!arrays[i])
			continue;

		if (arrays[i] == items)
		{
			existingFuncs.clear();
			existingProcs.clear();
		}

		collectPackagedItems(tdbb, transaction, name, existingFuncs, existingProcs, true);

		for (unsigned j = 0; j < arrays[i]->getCount(); ++j)
		{
			CreateAlterPackageNode::Item& elem = (*arrays[i])[j];

			switch (elem.type)
			{
				case CreateAlterPackageNode::Item::FUNCTION:
				{
					CreateAlterFunctionNode* func = elem.function;

					if (arrays[i] == items)
						func->privateScope = !headerFuncs.exist(Signature(func->name.object));
					else if (existingFuncs.exist(Signature(func->name.object)))
					{
						status_exception::raise(
							Arg::Gds(isc_no_meta_update) <<
							Arg::Gds(isc_dyn_duplicate_package_item) <<
								Arg::Str("FUNCTION") << func->name.toQuotedString());
					}

					func->packageOwner = owner;
					func->preserveDefaults =
						existingFuncs.exist(Signature(func->name.object)) && arrays[i] == items;
					func->executeDdl(tdbb, elem.dsqlScratch, transaction, true);
					break;
				}

				case CreateAlterPackageNode::Item::PROCEDURE:
				{
					CreateAlterProcedureNode* proc = elem.procedure;

					if (arrays[i] == items)
						proc->privateScope = !headerProcs.exist(Signature(proc->name.object));
					else if (existingProcs.exist(Signature(proc->name.object)))
					{
						status_exception::raise(
							Arg::Gds(isc_no_meta_update) <<
							Arg::Gds(isc_dyn_duplicate_package_item) <<
								Arg::Str("PROCEDURE") << proc->name.toQuotedString());
					}

					proc->packageOwner = owner;
					proc->preserveDefaults =
						existingProcs.exist(Signature(proc->name.object)) && arrays[i] == items;
					proc->executeDdl(tdbb, elem.dsqlScratch, transaction, true);
					break;
				}
			}
		}
	}

	SortedObjectsArray<Signature> newFuncs(pool);
	SortedObjectsArray<Signature> newProcs(pool);
	collectPackagedItems(tdbb, transaction, name, newFuncs, newProcs, true);

	for (SortedObjectsArray<Signature>::iterator i = existingFuncs.begin();
		 i != existingFuncs.end(); ++i)
	{
		FB_SIZE_T pos;
		bool found = newFuncs.find(Signature(pool, i->name), pos);

		if (!found || !newFuncs[pos].defined)
		{
			status_exception::raise(
				Arg::Gds(isc_dyn_funcnotdef_package) << i->name << name.toQuotedString());
		}
		else if (newFuncs[pos] != *i)
		{
			status_exception::raise(
				Arg::Gds(isc_dyn_funcsignat_package) << i->name << name.toQuotedString());
		}
	}

	for (SortedObjectsArray<Signature>::iterator i = existingProcs.begin();
		 i != existingProcs.end(); ++i)
	{
		FB_SIZE_T pos;
		bool found = newProcs.find(Signature(pool, i->name), pos);

		if (!found || !newProcs[pos].defined)
		{
			status_exception::raise(
				Arg::Gds(isc_dyn_procnotdef_package) << i->name << name.toQuotedString());
		}
		else if (newProcs[pos] != *i)
		{
			status_exception::raise(
				Arg::Gds(isc_dyn_procsignat_package) << i->name << name.toQuotedString());
		}
	}

	executeDdlTrigger(tdbb, dsqlScratch, transaction, DTW_AFTER, DDL_TRIGGER_CREATE_PACKAGE_BODY, name, {});

	savePoint.release();	// everything is ok
}


//----------------------


string DropPackageBodyNode::internalPrint(NodePrinter& printer) const
{
	DdlNode::internalPrint(printer);

	NODE_PRINT(printer, name);
	NODE_PRINT(printer, silent);

	return "DropPackageBodyNode";
}


void DropPackageBodyNode::checkPermission(thread_db* tdbb, jrd_tra* transaction)
{
	SCL_check_package(tdbb, name, SCL_drop);
}


void DropPackageBodyNode::execute(thread_db* tdbb, DsqlCompilerScratch* dsqlScratch,
	jrd_tra* transaction)
{
	MemoryPool& pool = dsqlScratch->getPool();

	// run all statements under savepoint control
	AutoSavePoint savePoint(tdbb, transaction);

	bool found = false;
	AutoCacheRequest requestHandle(tdbb, drq_m_pkg_body2, DYN_REQUESTS);

	FOR (REQUEST_HANDLE requestHandle TRANSACTION_HANDLE transaction)
		PKG IN RDB$PACKAGES
		WITH PKG.RDB$SCHEMA_NAME EQ name.schema.c_str() AND
			 PKG.RDB$PACKAGE_NAME EQ name.object.c_str()
	{
		found = true;

		executeDdlTrigger(tdbb, dsqlScratch, transaction, DTW_BEFORE, DDL_TRIGGER_DROP_PACKAGE_BODY, name, {});

		MODIFY PKG
			PKG.RDB$VALID_BODY_FLAG.NULL = TRUE;
			PKG.RDB$PACKAGE_BODY_SOURCE.NULL = TRUE;

			dsc schemaDesc, nameDesc;
			schemaDesc.makeText(name.schema.length(), ttype_metadata, (UCHAR*) const_cast<char*>(name.schema.c_str()));
			nameDesc.makeText(name.object.length(), ttype_metadata, (UCHAR*) const_cast<char*>(name.object.c_str()));
			DFW_post_work(transaction, dfw_drop_package_body, &nameDesc, &schemaDesc, 0);
		END_MODIFY
	}
	END_FOR

	if (!found)
	{
		if (silent)
		{
			savePoint.release();
			return;
		}

		status_exception::raise(
			Arg::Gds(isc_no_meta_update) <<
			Arg::Gds(isc_dyn_package_not_found) << name.toQuotedString());
	}

	requestHandle.reset(tdbb, drq_m_pkg_fun, DYN_REQUESTS);

	FOR (REQUEST_HANDLE requestHandle TRANSACTION_HANDLE transaction)
		FUN IN RDB$FUNCTIONS
		WITH FUN.RDB$SCHEMA_NAME EQ name.schema.c_str() AND
			 FUN.RDB$PACKAGE_NAME EQ name.object.c_str()
	{
		if (!FUN.RDB$PRIVATE_FLAG.NULL && FUN.RDB$PRIVATE_FLAG != 0)
		{
			DropFunctionNode dropNode(pool, QualifiedName(FUN.RDB$FUNCTION_NAME, name.schema, name.object));
			dropNode.dsqlPass(dsqlScratch);
			dropNode.executeDdl(tdbb, dsqlScratch, transaction, true);
		}
		else
		{
			MODIFY FUN
				FUN.RDB$FUNCTION_TYPE.NULL = TRUE;
				FUN.RDB$FUNCTION_BLR.NULL = TRUE;
				FUN.RDB$DEBUG_INFO.NULL = TRUE;
				FUN.RDB$MODULE_NAME.NULL = TRUE;
				FUN.RDB$ENGINE_NAME.NULL = TRUE;
				FUN.RDB$ENTRYPOINT.NULL = TRUE;
			END_MODIFY
		}
	}
	END_FOR

	requestHandle.reset(tdbb, drq_m_pkg_prc, DYN_REQUESTS);

	FOR (REQUEST_HANDLE requestHandle TRANSACTION_HANDLE transaction)
		PRC IN RDB$PROCEDURES
		WITH PRC.RDB$SCHEMA_NAME EQ name.schema.c_str() AND
			 PRC.RDB$PACKAGE_NAME EQ name.object.c_str()
	{
		if (!PRC.RDB$PRIVATE_FLAG.NULL && PRC.RDB$PRIVATE_FLAG != 0)
		{
			DropProcedureNode dropNode(pool, QualifiedName(PRC.RDB$PROCEDURE_NAME, name.schema, name.object));
			dropNode.dsqlPass(dsqlScratch);
			dropNode.executeDdl(tdbb, dsqlScratch, transaction, true);
		}
		else
		{
			MODIFY PRC
				PRC.RDB$PROCEDURE_TYPE.NULL = TRUE;
				PRC.RDB$PROCEDURE_BLR.NULL = TRUE;
				PRC.RDB$DEBUG_INFO.NULL = TRUE;
				PRC.RDB$ENGINE_NAME.NULL = TRUE;
				PRC.RDB$ENTRYPOINT.NULL = TRUE;
			END_MODIFY
		}
	}
	END_FOR

	executeDdlTrigger(tdbb, dsqlScratch, transaction, DTW_AFTER, DDL_TRIGGER_DROP_PACKAGE_BODY, name, {});

	savePoint.release();	// everything is ok
}


}	// namespace Jrd
